const { Client, EmbedBuilder, PermissionsBitField, ChannelType } = require("discord.js");
const db = require("croxydb");

module.exports = {
  name: "stats-ayarla",
  description: "Stats sistemini aÃ§Ä±p kapatÄ±p kanallarÄ± ayarlarsÄ±nÄ±z.",
  type: 1,
  options: [
    {
      name: "iÅŸlem",
      description: "Stats aÃ§Ä±lsÄ±n mÄ±?",
      choices: [
        { name: "AÃ§", value: "aÃ§" },
        { name: "Kapat", value: "kapat" }
      ],
      type: 3,
      required: true
    },
    {
      name: "kanal1",
      description: "Toplam Ã¼ye sayÄ±sÄ±",
      type: 7,
      required: true
    },
    {
      name: "kanal2",
      description: "Sunucuda bulunan toplam kullanÄ±cÄ±",
      type: 7,
      required: true
    },
    {
      name: "kanal3",
      description: "Bot sayÄ±sÄ±",
      type: 7,
      required: true
    },
    {
      name: "kanal4",
      description: "Sunucu aktiflik durumu",
      type: 7,
      required: true
    },
  ],
  run: async (client, interaction) => {
    if (!interaction.member.permissions.has(PermissionsBitField.Flags.ManageRoles)) 
      return interaction.reply({ content: "Rolleri YÃ¶net Yetkin Yok!", ephemeral: true });

    const iÅŸlem = interaction.options.getString('iÅŸlem');

    const embedKapalÄ± = new EmbedBuilder()
      .setColor("Red")
      .setDescription("âœ… **Sistem KapatÄ±ldÄ±** \n Stats Durumu KapalÄ± Hale Getirildi.");
    const embedAÃ§Ä±k = new EmbedBuilder()
      .setColor("Green")
      .setDescription("âœ… **Sistem AÃ§Ä±ldÄ±** \n Stats Durumu AÃ§Ä±k Hale Getirildi.");

    if (iÅŸlem === 'kapat') {
      db.set(`statsdurum_${interaction.guild.id}`, 'kapalÄ±');
      interaction.reply({embeds: [embedKapalÄ±], allowedMentions: { repliedUser: false }});
      return;
    }

    if (iÅŸlem === 'aÃ§') {
      db.set(`statsdurum_${interaction.guild.id}`, 'aÃ§Ä±k');
      interaction.reply({embeds: [embedAÃ§Ä±k], allowedMentions: { repliedUser: false }});
    }

    const check = db.get(`statsdurum_${interaction.guild.id}`);
    if (check === 'kapalÄ±') 
      return interaction.reply("Stats sistemini aktif etmeden bu komutu kullanamazsÄ±n! /stats aÃ§/kapat");

    if (!interaction.member.permissions.has(PermissionsBitField.Flags.ManageChannels)) 
      return interaction.reply({ content: "KanallarÄ± YÃ¶net Yetkin Yok!", ephemeral: true });

    const kanal1 = interaction.options.getChannel('kanal1');
    db.set(`statkanal1_${interaction.guild.id}`, kanal1.id);
    const kanal2 = interaction.options.getChannel('kanal2');
    db.set(`statkanal2_${interaction.guild.id}`, kanal2.id);
    const kanal3 = interaction.options.getChannel('kanal3');
    db.set(`statkanal3_${interaction.guild.id}`, kanal3.id);
    const kanal4 = interaction.options.getChannel('kanal4');
    db.set(`statkanal4_${interaction.guild.id}`, kanal4.id);

    const toplam = db.get(`statkanal1_${interaction.guild.id}`);
    const uye = db.get(`statkanal2_${interaction.guild.id}`);
    const bot = db.get(`statkanal3_${interaction.guild.id}`);
    const stats = db.get(`statkanal4_${interaction.guild.id}`);

    interaction.guild.channels.cache.get(stats).setName(
      `ğŸŸ¢ ${interaction.guild.members.cache.filter(m => m.presence?.status == 'online').size} â›” ${interaction.guild.members.cache.filter(m => m.presence?.status == 'dnd').size} ğŸŒ™ ${interaction.guild.members.cache.filter(m => m.presence?.status == 'idle').size} âš« ${interaction.guild.members.cache.filter(m => m.presence?.status == 'offline' || !m.presence).size}`
    );
    interaction.guild.channels.cache.get(toplam).setName(`ğŸ’œ Toplam ${interaction.guild.memberCount}`);
    interaction.guild.channels.cache.get(uye).setName(`ğŸ’œ Uye ${interaction.guild.members.cache.filter((m) => !m.user.bot).size}`);
    interaction.guild.channels.cache.get(bot).setName(`ğŸ¤– Bot - ${interaction.guild.members.cache.filter(m => m.user.bot).size}`);

    interaction.reply(`Stats KanallarÄ± BaÅŸarÄ±yla <#${kanal1.id}> - <#${kanal2.id}> - <#${kanal3.id}> - <#${kanal4.id}> Olarak AyarlandÄ±!`);
  }
};
